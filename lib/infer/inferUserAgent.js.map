{"version":3,"sources":["infer/inferUserAgent.js"],"names":["getUserAgentString","ELECTRON_VERSIONS_URL","DEFAULT_CHROME_VERSION","getChromeVersionForElectronVersion","electronVersion","url","get","timeout","then","response","status","Error","data","electronVersionToChromeVersion","zipObject","map","d","version","chrome","chromeVersion","platform","userAgent","inferUserAgent","catch","warn"],"mappings":";;;;;QA4BgBA,kB,GAAAA,kB;;AA5BhB;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,wBAAwB,gDAA9B;AACA,IAAMC,yBAAyB,eAA/B;;AAEA,SAASC,kCAAT,CAA4CC,eAA5C,EAA0F;AAAA,MAA7BC,GAA6B,uEAAvBJ,qBAAuB;;AACxF,SAAO,gBAAMK,GAAN,CAAUD,GAAV,EAAe,EAAEE,SAAS,IAAX,EAAf,EACJC,IADI,CACC,UAACC,QAAD,EAAc;AAClB,QAAIA,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAW,4BAA2BF,SAASC,MAAO,EAAtD,CAAN;AACD;;AAHiB,QAKVE,IALU,GAKDH,QALC,CAKVG,IALU;;AAMlB,QAAMC,iCAAiC,iBAAEC,SAAF,CACrCF,KAAKG,GAAL,CAAS;AAAA,aAAKC,EAAEC,OAAP;AAAA,KAAT,CADqC,EAErCL,KAAKG,GAAL,CAAS;AAAA,aAAKC,EAAEE,MAAP;AAAA,KAAT,CAFqC,CAAvC;;AAKA,QAAI,EAAEd,mBAAmBS,8BAArB,CAAJ,EAA0D;AACxD,YAAM,IAAIF,KAAJ,CAAW,qBAAoBP,eAAgB,wCAA/C,CAAN;AACD;;AAED,WAAOS,+BAA+BT,eAA/B,CAAP;AACD,GAjBI,CAAP;AAkBD;;AAEM,SAASJ,kBAAT,CAA4BmB,aAA5B,EAA2CC,QAA3C,EAAqD;AAC1D,MAAIC,kBAAJ;AACA,UAAQD,QAAR;AACE,SAAK,QAAL;AACA,SAAK,KAAL;AACEC,kBAAa,iGAAgGF,aAAc,gBAA3H;AACA;AACF,SAAK,OAAL;AACEE,kBAAa,2FAA0FF,aAAc,gBAArH;AACA;AACF,SAAK,OAAL;AACEE,kBAAa,iFAAgFF,aAAc,gBAA3G;AACA;AACF;AACE,YAAM,IAAIR,KAAJ,CAAU,0DAAV,CAAN;AAZJ;AAcA,SAAOU,SAAP;AACD;;AAED,SAASC,cAAT,CAAwBlB,eAAxB,EAAyCgB,QAAzC,EAAgF;AAAA,MAA7Bf,GAA6B,uEAAvBJ,qBAAuB;;AAC9E,SAAOE,mCAAmCC,eAAnC,EAAoDC,GAApD,EACJG,IADI,CACC;AAAA,WAAiBR,mBAAmBmB,aAAnB,EAAkCC,QAAlC,CAAjB;AAAA,GADD,EAEJG,KAFI,CAEE,YAAM;AACX,uBAAIC,IAAJ,CAAU,wDAAuDtB,sBAAuB,EAAxF;AACA,WAAOF,mBAAmBE,sBAAnB,EAA2CkB,QAA3C,CAAP;AACD,GALI,CAAP;AAMD;;kBAEcE,c","file":"inferUserAgent.js","sourcesContent":["import axios from 'axios';\nimport _ from 'lodash';\nimport log from 'loglevel';\n\nconst ELECTRON_VERSIONS_URL = 'https://atom.io/download/atom-shell/index.json';\nconst DEFAULT_CHROME_VERSION = '58.0.3029.110';\n\nfunction getChromeVersionForElectronVersion(electronVersion, url = ELECTRON_VERSIONS_URL) {\n  return axios.get(url, { timeout: 5000 })\n    .then((response) => {\n      if (response.status !== 200) {\n        throw new Error(`Bad request: Status code ${response.status}`);\n      }\n\n      const { data } = response;\n      const electronVersionToChromeVersion = _.zipObject(\n        data.map(d => d.version),\n        data.map(d => d.chrome),\n      );\n\n      if (!(electronVersion in electronVersionToChromeVersion)) {\n        throw new Error(`Electron version '${electronVersion}' not found in retrieved version list!`);\n      }\n\n      return electronVersionToChromeVersion[electronVersion];\n    });\n}\n\nexport function getUserAgentString(chromeVersion, platform) {\n  let userAgent;\n  switch (platform) {\n    case 'darwin':\n    case 'mas':\n      userAgent = `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${chromeVersion} Safari/537.36`;\n      break;\n    case 'win32':\n      userAgent = `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${chromeVersion} Safari/537.36`;\n      break;\n    case 'linux':\n      userAgent = `Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${chromeVersion} Safari/537.36`;\n      break;\n    default:\n      throw new Error('Error invalid platform specified to getUserAgentString()');\n  }\n  return userAgent;\n}\n\nfunction inferUserAgent(electronVersion, platform, url = ELECTRON_VERSIONS_URL) {\n  return getChromeVersionForElectronVersion(electronVersion, url)\n    .then(chromeVersion => getUserAgentString(chromeVersion, platform))\n    .catch(() => {\n      log.warn(`Unable to infer chrome version for user agent, using ${DEFAULT_CHROME_VERSION}`);\n      return getUserAgentString(DEFAULT_CHROME_VERSION, platform);\n    });\n}\n\nexport default inferUserAgent;\n"]}