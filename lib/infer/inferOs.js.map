{"version":3,"sources":["infer/inferOs.js"],"names":["inferPlatform","platform","Error","inferArch","arch"],"mappings":";;;;;;AAAA;;;;;;AAEA,SAASA,aAAT,GAAyB;AACvB,MAAMC,WAAW,aAAGA,QAAH,EAAjB;AACA,MAAKA,aAAa,QAAb,IAAyBA,aAAa,KAAvC,IAAiDA,aAAa,OAA9D,IAAyEA,aAAa,OAA1F,EAAmG;AACjG,WAAOA,QAAP;AACD;;AAED,QAAM,IAAIC,KAAJ,CAAW,qBAAoBD,QAAS,WAAxC,CAAN;AACD;;AAED,SAASE,SAAT,GAAqB;AACnB,MAAMC,OAAO,aAAGA,IAAH,EAAb;AACA,MAAIA,SAAS,MAAT,IAAmBA,SAAS,KAA5B,IAAqCA,SAAS,KAAlD,EAAyD;AACvD,UAAM,IAAIF,KAAJ,CAAW,6BAA4BE,IAAK,WAA5C,CAAN;AACD;AACD,SAAOA,IAAP;AACD;;kBAEc;AACbJ,eADa;AAEbG;AAFa,C","file":"inferOs.js","sourcesContent":["import os from 'os';\n\nfunction inferPlatform() {\n  const platform = os.platform();\n  if ((platform === 'darwin' || platform === 'mas') || platform === 'win32' || platform === 'linux') {\n    return platform;\n  }\n\n  throw new Error(`Untested platform ${platform} detected`);\n}\n\nfunction inferArch() {\n  const arch = os.arch();\n  if (arch !== 'ia32' && arch !== 'x64' && arch !== 'arm') {\n    throw new Error(`Incompatible architecture ${arch} detected`);\n  }\n  return arch;\n}\n\nexport default {\n  inferPlatform,\n  inferArch,\n};\n"]}