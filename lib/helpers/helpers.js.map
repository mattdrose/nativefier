{"version":3,"sources":["helpers/helpers.js"],"names":["isOSX","platform","isWindows","downloadFile","fileUrl","get","responseType","then","response","data","ext","extname","allowedIconFormats","hasIdentify","sync","hasConvert","hasIconUtil","pngToIcns","pngToIco","icoToIcns","icoToPng","icnsToPng","icnsToIco","formats","push","Error"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,KAAT,GAAiB;AACf,SAAO,aAAGC,QAAH,OAAkB,QAAzB;AACD;;AAED,SAASC,SAAT,GAAqB;AACnB,SAAO,aAAGD,QAAH,OAAkB,OAAzB;AACD;;AAED,SAASE,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,SAAO,gBAAMC,GAAN,CAAUD,OAAV,EAAmB;AACxBE,kBAAc;AADU,GAAnB,EAGJC,IAHI,CAGC,UAACC,QAAD,EAAc;AAClB,QAAI,CAACA,SAASC,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD;AACD,WAAO;AACLA,YAAMD,SAASC,IADV;AAELC,WAAK,eAAKC,OAAL,CAAaP,OAAb;AAFA,KAAP;AAID,GAXI,CAAP;AAYD;;AAED,SAASQ,kBAAT,CAA4BX,QAA5B,EAAsC;AACpC,MAAMY,cAAc,iBAAUC,IAAV,CAAe,UAAf,CAApB;AACA,MAAMC,aAAa,iBAAUD,IAAV,CAAe,SAAf,CAAnB;AACA,MAAME,cAAc,iBAAUF,IAAV,CAAe,UAAf,CAApB;;AAEA,MAAMG,YAAYF,cAAcC,WAAhC;AACA,MAAME,WAAWH,UAAjB;AACA,MAAMI,YAAYF,aAAaJ,WAA/B;AACA,MAAMO,WAAWL,UAAjB;;AAEA;AACA,MAAMM,YAAY,KAAlB;AACA,MAAMC,YAAY,KAAlB;;AAEA,MAAMC,UAAU,EAAhB;;AAEA;AACA,MAAIrB,WAAJ,EAAiB;AACf,YAAQD,QAAR;AACE,WAAK,QAAL;AACEsB,gBAAQC,IAAR,CAAa,OAAb;AACA;AACF,WAAK,OAAL;AACED,gBAAQC,IAAR,CAAa,MAAb;AACA;AACF,WAAK,OAAL;AACED,gBAAQC,IAAR,CAAa,MAAb;AACA;AACF;AACE,cAAM,IAAIC,KAAJ,CAAW,uDAAsDxB,QAAS,EAA1E,CAAN;AAXJ;AAaA,WAAOsB,OAAP;AACD;;AAED,UAAQtB,QAAR;AACE,SAAK,QAAL;AACEsB,cAAQC,IAAR,CAAa,OAAb;AACA,UAAIP,SAAJ,EAAe;AACbM,gBAAQC,IAAR,CAAa,MAAb;AACD;AACD,UAAIL,SAAJ,EAAe;AACbI,gBAAQC,IAAR,CAAa,MAAb;AACD;AACD;AACF,SAAK,OAAL;AACED,cAAQC,IAAR,CAAa,MAAb;AACA,UAAIJ,QAAJ,EAAc;AACZG,gBAAQC,IAAR,CAAa,MAAb;AACD;AACD,UAAIH,SAAJ,EAAe;AACbE,gBAAQC,IAAR,CAAa,OAAb;AACD;AACD;AACF,SAAK,OAAL;AACED,cAAQC,IAAR,CAAa,MAAb;AACA,UAAIN,QAAJ,EAAc;AACZK,gBAAQC,IAAR,CAAa,MAAb;AACD;AACD,UAAIF,SAAJ,EAAe;AACbC,gBAAQC,IAAR,CAAa,OAAb;AACD;AACD;AACF;AACE,YAAM,IAAIC,KAAJ,CAAW,uDAAsDxB,QAAS,EAA1E,CAAN;AA7BJ;AA+BA,SAAOsB,OAAP;AACD;;kBAEc;AACbvB,OADa;AAEbE,WAFa;AAGbC,cAHa;AAIbS;AAJa,C","file":"helpers.js","sourcesContent":["import os from 'os';\nimport axios from 'axios';\nimport hasBinary from 'hasbin';\nimport path from 'path';\n\nfunction isOSX() {\n  return os.platform() === 'darwin';\n}\n\nfunction isWindows() {\n  return os.platform() === 'win32';\n}\n\nfunction downloadFile(fileUrl) {\n  return axios.get(fileUrl, {\n    responseType: 'arraybuffer',\n  })\n    .then((response) => {\n      if (!response.data) {\n        return null;\n      }\n      return {\n        data: response.data,\n        ext: path.extname(fileUrl),\n      };\n    });\n}\n\nfunction allowedIconFormats(platform) {\n  const hasIdentify = hasBinary.sync('identify');\n  const hasConvert = hasBinary.sync('convert');\n  const hasIconUtil = hasBinary.sync('iconutil');\n\n  const pngToIcns = hasConvert && hasIconUtil;\n  const pngToIco = hasConvert;\n  const icoToIcns = pngToIcns && hasIdentify;\n  const icoToPng = hasConvert;\n\n  // todo scripts for the following\n  const icnsToPng = false;\n  const icnsToIco = false;\n\n  const formats = [];\n\n  // todo shell scripting is not supported on windows, temporary override\n  if (isWindows()) {\n    switch (platform) {\n      case 'darwin':\n        formats.push('.icns');\n        break;\n      case 'linux':\n        formats.push('.png');\n        break;\n      case 'win32':\n        formats.push('.ico');\n        break;\n      default:\n        throw new Error(`function allowedIconFormats error: Unknown platform ${platform}`);\n    }\n    return formats;\n  }\n\n  switch (platform) {\n    case 'darwin':\n      formats.push('.icns');\n      if (pngToIcns) {\n        formats.push('.png');\n      }\n      if (icoToIcns) {\n        formats.push('.ico');\n      }\n      break;\n    case 'linux':\n      formats.push('.png');\n      if (icoToPng) {\n        formats.push('.ico');\n      }\n      if (icnsToPng) {\n        formats.push('.icns');\n      }\n      break;\n    case 'win32':\n      formats.push('.ico');\n      if (pngToIco) {\n        formats.push('.png');\n      }\n      if (icnsToIco) {\n        formats.push('.icns');\n      }\n      break;\n    default:\n      throw new Error(`function allowedIconFormats error: Unknown platform ${platform}`);\n  }\n  return formats;\n}\n\nexport default {\n  isOSX,\n  isWindows,\n  downloadFile,\n  allowedIconFormats,\n};\n"]}