{"version":3,"sources":["helpers/iconShellHelpers.js"],"names":["isWindows","isOSX","setGracefulCleanup","SCRIPT_PATHS","singleIco","join","__dirname","convertToPng","convertToIco","convertToIcns","iconShellHelper","shellScriptPath","icoSrc","dest","Promise","resolve","reject","Error","exec","silent","exitCode","stdOut","stdError","getTmpDirPath","tempIconDirObj","dirSync","unsafeCleanup","name"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,S,qBAAAA,S;IAAWC,K,qBAAAA,K;;;AAEnB,cAAIC,kBAAJ;;AAEA,IAAMC,eAAe;AACnBC,aAAW,eAAKC,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,eAA9B,CADQ;AAEnBC,gBAAc,eAAKF,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,kBAA9B,CAFK;AAGnBE,gBAAc,eAAKH,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,kBAA9B,CAHK;AAInBG,iBAAe,eAAKJ,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,mBAA9B;AAJI,CAArB;;AAOA;;;;;;AAMA,SAASI,eAAT,CAAyBC,eAAzB,EAA0CC,MAA1C,EAAkDC,IAAlD,EAAwD;AACtD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIhB,WAAJ,EAAiB;AACfgB,aAAO,IAAIC,KAAJ,CAAU,0BAAV,CAAP;AACA;AACD;;AAED,sBAAMC,IAAN,CAAY,GAAEP,eAAgB,IAAGC,MAAO,IAAGC,IAAK,EAAhD,EAAmD,EAAEM,QAAQ,IAAV,EAAnD,EAAqE,UAACC,QAAD,EAAWC,MAAX,EAAmBC,QAAnB,EAAgC;AACnG,UAAIF,QAAJ,EAAc;AACZ;AACAJ,eAAO;AACLK,gBADK;AAELC;AAFK,SAAP;AAIA;AACD;;AAEDP,cAAQF,IAAR;AACD,KAXD;AAYD,GAlBM,CAAP;AAmBD;;AAED,SAASU,aAAT,GAAyB;AACvB,MAAMC,iBAAiB,cAAIC,OAAJ,CAAY,EAAEC,eAAe,IAAjB,EAAZ,CAAvB;AACA,SAAOF,eAAeG,IAAtB;AACD;;AAED;;;;;;AAMA,SAASvB,SAAT,CAAmBQ,MAAnB,EAA2B;AACzB,SAAOF,gBAAgBP,aAAaC,SAA7B,EAAwCQ,MAAxC,EAAiD,GAAEW,eAAgB,WAAnE,CAAP;AACD;;AAED,SAAShB,YAAT,CAAsBK,MAAtB,EAA8B;AAC5B,SAAOF,gBAAgBP,aAAaI,YAA7B,EAA2CK,MAA3C,EAAoD,GAAEW,eAAgB,WAAtE,CAAP;AACD;;AAED,SAASf,YAAT,CAAsBI,MAAtB,EAA8B;AAC5B,SAAOF,gBAAgBP,aAAaK,YAA7B,EAA2CI,MAA3C,EAAoD,GAAEW,eAAgB,WAAtE,CAAP;AACD;;AAED,SAASd,aAAT,CAAuBG,MAAvB,EAA+B;AAC7B,MAAI,CAACX,OAAL,EAAc;AACZ,WAAO,IAAIa,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,aAAqBA,OAAO,IAAIC,KAAJ,CAAU,4CAAV,CAAP,CAArB;AAAA,KAAZ,CAAP;AACD;AACD,SAAOP,gBAAgBP,aAAaM,aAA7B,EAA4CG,MAA5C,EAAqD,GAAEW,eAAgB,YAAvE,CAAP;AACD;;kBAEc;AACbnB,WADa;AAEbG,cAFa;AAGbC,cAHa;AAIbC;AAJa,C","file":"iconShellHelpers.js","sourcesContent":["import shell from 'shelljs';\nimport path from 'path';\nimport tmp from 'tmp';\nimport helpers from './helpers';\n\nconst { isWindows, isOSX } = helpers;\n\ntmp.setGracefulCleanup();\n\nconst SCRIPT_PATHS = {\n  singleIco: path.join(__dirname, '../..', 'bin/singleIco'),\n  convertToPng: path.join(__dirname, '../..', 'bin/convertToPng'),\n  convertToIco: path.join(__dirname, '../..', 'bin/convertToIco'),\n  convertToIcns: path.join(__dirname, '../..', 'bin/convertToIcns'),\n};\n\n/**\n * Executes a shell script with the form \"./pathToScript param1 param2\"\n * @param {string} shellScriptPath\n * @param {string} icoSrc input .ico\n * @param {string} dest has to be a .ico path\n */\nfunction iconShellHelper(shellScriptPath, icoSrc, dest) {\n  return new Promise((resolve, reject) => {\n    if (isWindows()) {\n      reject(new Error('OSX or Linux is required'));\n      return;\n    }\n\n    shell.exec(`${shellScriptPath} ${icoSrc} ${dest}`, { silent: true }, (exitCode, stdOut, stdError) => {\n      if (exitCode) {\n        // eslint-disable-next-line prefer-promise-reject-errors\n        reject({\n          stdOut,\n          stdError,\n        });\n        return;\n      }\n\n      resolve(dest);\n    });\n  });\n}\n\nfunction getTmpDirPath() {\n  const tempIconDirObj = tmp.dirSync({ unsafeCleanup: true });\n  return tempIconDirObj.name;\n}\n\n/**\n * Converts the ico to a temporary directory which will be cleaned up on process exit\n * @param {string} icoSrc path to a .ico file\n * @return {Promise}\n */\n\nfunction singleIco(icoSrc) {\n  return iconShellHelper(SCRIPT_PATHS.singleIco, icoSrc, `${getTmpDirPath()}/icon.ico`);\n}\n\nfunction convertToPng(icoSrc) {\n  return iconShellHelper(SCRIPT_PATHS.convertToPng, icoSrc, `${getTmpDirPath()}/icon.png`);\n}\n\nfunction convertToIco(icoSrc) {\n  return iconShellHelper(SCRIPT_PATHS.convertToIco, icoSrc, `${getTmpDirPath()}/icon.ico`);\n}\n\nfunction convertToIcns(icoSrc) {\n  if (!isOSX()) {\n    return new Promise((resolve, reject) => reject(new Error('OSX is required to convert to a .icns icon')));\n  }\n  return iconShellHelper(SCRIPT_PATHS.convertToIcns, icoSrc, `${getTmpDirPath()}/icon.icns`);\n}\n\nexport default {\n  singleIco,\n  convertToPng,\n  convertToIco,\n  convertToIcns,\n};\n"]}