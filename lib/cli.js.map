{"version":3,"sources":["cli.js"],"names":["dns","require","packageJson","log","collect","val","memo","push","parseJson","JSON","parse","getProcessEnvs","pEnv","processEnvs","checkInternet","lookup","err","code","warn","main","module","version","arguments","action","targetUrl","appDir","out","option","parseInt","parseFloat","process","argv","slice","length","help","error","appPath","info"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport 'source-map-support/register';\nimport program from 'commander';\nimport nativefier from './index';\n\nconst dns = require('dns');\nconst packageJson = require('./../package');\nconst log = require('loglevel');\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction parseJson(val) {\n  if (!val) return {};\n  return JSON.parse(val);\n}\n\nfunction getProcessEnvs(val) {\n  if (!val) return {};\n  const pEnv = {};\n  pEnv.processEnvs = parseJson(val);\n  return pEnv;\n}\n\nfunction checkInternet() {\n  dns.lookup('npmjs.com', (err) => {\n    if (err && err.code === 'ENOTFOUND') {\n      log.warn('\\nNo Internet Connection\\nTo offline build, download electron from https://github.com/electron/electron/releases\\nand place in ~/AppData/Local/electron/Cache/ on Windows,\\n~/.cache/electron on Linux or ~/Library/Caches/electron/ on Mac\\nUse --electron-version to specify the version you downloaded.');\n    }\n  });\n}\n\n\nif (require.main === module) {\n  program\n    .version(packageJson.version)\n    .arguments('<targetUrl> [dest]')\n    .action((targetUrl, appDir) => {\n      program.targetUrl = targetUrl;\n      program.out = appDir;\n    })\n    .option('-n, --name <value>', 'app name')\n    .option('-p, --platform <value>', '\\'osx\\', \\'mas\\', \\'linux\\' or \\'windows\\'')\n    .option('-a, --arch <value>', '\\'ia32\\' or \\'x64\\' or \\'armv7l\\'')\n    .option('--app-version <value>', 'The release version of the application.  Maps to the `ProductVersion` metadata property on Windows, and `CFBundleShortVersionString` on OS X.')\n    .option('--build-version <value>', 'The build version of the application. Maps to the `FileVersion` metadata property on Windows, and `CFBundleVersion` on OS X.')\n    .option('--app-copyright <value>', 'The human-readable copyright line for the app. Maps to the `LegalCopyright` metadata property on Windows, and `NSHumanReadableCopyright` on OS X')\n    .option('--win32metadata <json-string>', 'a JSON string of key/value pairs of application metadata (ProductName, InternalName, FileDescription) to embed into the executable (Windows only).', parseJson)\n    .option('-e, --electron-version <value>', 'electron version to package, without the \\'v\\', see https://github.com/atom/electron/releases')\n    .option('--no-overwrite', 'do not override output directory if it already exists, defaults to false')\n    .option('-c, --conceal', 'packages the source code within your app into an archive, defaults to false, see http://electron.atom.io/docs/v0.36.0/tutorial/application-packaging/')\n    .option('--counter', 'if the target app should use a persistant counter badge in the dock (OSX only), defaults to false')\n    .option('--bounce', 'if the the dock icon should bounce when counter increases (OSX only), defaults to false')\n    .option('-i, --icon <value>', 'the icon file to use as the icon for the app (should be a .png)')\n    .option('--width <value>', 'set window default width, defaults to 1280px', parseInt)\n    .option('--height <value>', 'set window default height, defaults to 800px', parseInt)\n    .option('--min-width <value>', 'set window minimum width, defaults to 0px', parseInt)\n    .option('--min-height <value>', 'set window minimum height, defaults to 0px', parseInt)\n    .option('--max-width <value>', 'set window maximum width, default is no limit', parseInt)\n    .option('--max-height <value>', 'set window maximum height, default is no limit', parseInt)\n    .option('--x <value>', 'set window x location', parseInt)\n    .option('--y <value>', 'set window y location', parseInt)\n    .option('-m, --show-menu-bar', 'set menu bar visible, defaults to false')\n    .option('-f, --fast-quit', 'quit app after window close (OSX only), defaults to false')\n    .option('-u, --user-agent <value>', 'set the user agent string for the app')\n    .option('--honest', 'prevent the nativefied app from changing the user agent string to masquerade as a regular chrome browser')\n    .option('--ignore-certificate', 'ignore certificate related errors')\n    .option('--ignore-gpu-blacklist', 'allow WebGl apps to work on non supported graphics cards')\n    .option('--enable-es3-apis', 'force activation of WebGl 2.0')\n    .option('--insecure', 'enable loading of insecure content, defaults to false')\n    .option('--flash', 'if flash should be enabled')\n    .option('--flash-path <value>', 'path to Chrome flash plugin, find it in `Chrome://plugins`')\n    .option('--disk-cache-size <value>', 'forces the maximum disk space (in bytes) to be used by the disk cache')\n    .option('--inject <value>', 'path to a CSS/JS file to be injected', collect, [])\n    .option('--full-screen', 'if the app should always be started in full screen')\n    .option('--maximize', 'if the app should always be started maximized')\n    .option('--hide-window-frame', 'disable window frame and controls')\n    .option('--verbose', 'if verbose logs should be displayed')\n    .option('--disable-context-menu', 'disable the context menu')\n    .option('--disable-dev-tools', 'disable developer tools')\n    .option('--zoom <value>', 'default zoom factor to use when the app is opened, defaults to 1.0', parseFloat)\n    .option('--internal-urls <value>', 'regular expression of URLs to consider \"internal\"; all other URLs will be opened in an external browser.  (default: URLs on same second-level domain as app)')\n    .option('--crash-reporter <value>', 'remote server URL to send crash reports')\n    .option('--single-instance', 'allow only a single instance of the application')\n    .option('--processEnvs <json-string>', 'a JSON string of key/value pairs to be set as environment variables before any browser windows are opened.', getProcessEnvs)\n    .option('--file-download-options <json-string>', 'a JSON string of key/value pairs to be set as file download options.  See https://github.com/sindresorhus/electron-dl for available options.', parseJson)\n    .option('--tray', 'allow app to stay in system tray')\n    .option('--basic-auth-username <value>', 'basic http(s) auth username')\n    .option('--basic-auth-password <value>', 'basic http(s) auth password')\n    .option('--always-on-top', 'enable always on top window')\n    .parse(process.argv);\n\n  if (!process.argv.slice(2).length) {\n    program.help();\n  }\n  checkInternet();\n  nativefier(program, (error, appPath) => {\n    if (error) {\n      log.error(error);\n      return;\n    }\n\n    if (!appPath) {\n      // app exists and --overwrite is not passed\n      return;\n    }\n    log.info(`App built to ${appPath}`);\n  });\n}\n"]}