{"version":3,"sources":["options/asyncConfig.test.js"],"names":["jest","mock","mockImplementation","Promise","resolve","someField","test","param","another","expected","then","result","expect","toEqual"],"mappings":";;AAAA;;;;AACA;;;;;;AAEAA,KAAKC,IAAL,CAAU,UAAV;;AAEA,iBAAOC,kBAAP,CAA0B;AAAA,SAAM,CAACC,QAAQC,OAAR,CAAgB;AAC/CC,eAAW;AADoC,GAAhB,CAAD,CAAN;AAAA,CAA1B;;AAIAC,KAAK,2CAAL,EAAkD,YAAM;AACtD,MAAMC,QAAQ,EAAEC,SAAS,OAAX,EAAoBH,WAAW,UAA/B,EAAd;AACA,MAAMI,WAAW,EAAED,SAAS,OAAX,EAAoBH,WAAW,UAA/B,EAAjB;;AAEA,SAAO,2BAAYE,KAAZ,EAAmBG,IAAnB,CAAwB,UAACC,MAAD,EAAY;AACzCC,WAAOD,MAAP,EAAeE,OAAf,CAAuBJ,QAAvB;AACD,GAFM,CAAP;AAGD,CAPD","file":"asyncConfig.test.js","sourcesContent":["import asyncConfig from './asyncConfig';\nimport fields from './fields';\n\njest.mock('./fields');\n\nfields.mockImplementation(() => [Promise.resolve({\n  someField: 'newValue',\n})]);\n\ntest('it should merge the result of the promise', () => {\n  const param = { another: 'field', someField: 'oldValue' };\n  const expected = { another: 'field', someField: 'newValue' };\n\n  return asyncConfig(param).then((result) => {\n    expect(result).toEqual(expected);\n  });\n});\n\n"]}