{"version":3,"sources":["options/optionsMain.test.js"],"names":["jest","mock","mockedAsyncConfig","some","mockImplementation","Promise","resolve","test","params","targetUrl","then","result","expect","toHaveBeenCalledWith","objectContaining","toEqual"],"mappings":";;AAAA;;;;AACA;;;;;;AAEAA,KAAKC,IAAL,CAAU,eAAV;AACA,IAAMC,oBAAoB,EAAEC,MAAM,SAAR,EAA1B;AACA,sBAAYC,kBAAZ,CAA+B;AAAA,SAAMC,QAAQC,OAAR,CAAgBJ,iBAAhB,CAAN;AAAA,CAA/B;;AAEAK,KAAK,iCAAL,EAAwC,YAAM;AAC5C,MAAMC,SAAS;AACbC,eAAW;AADE,GAAf;AAGA,SAAO,2BAAYD,MAAZ,EAAoBE,IAApB,CAAyB,UAACC,MAAD,EAAY;AAC1CC,kCAAoBC,oBAApB,CAAyCD,OAAOE,gBAAP,CAAwBN,MAAxB,CAAzC;AACAI,WAAOD,MAAP,EAAeI,OAAf,CAAuBb,iBAAvB;AACD,GAHM,CAAP;AAID,CARD;;AAUA","file":"optionsMain.test.js","sourcesContent":["import optionsMain from './optionsMain';\nimport asyncConfig from './asyncConfig';\n\njest.mock('./asyncConfig');\nconst mockedAsyncConfig = { some: 'options' };\nasyncConfig.mockImplementation(() => Promise.resolve(mockedAsyncConfig));\n\ntest('it should call the async config', () => {\n  const params = {\n    targetUrl: 'http://example.com',\n  };\n  return optionsMain(params).then((result) => {\n    expect(asyncConfig).toHaveBeenCalledWith(expect.objectContaining(params));\n    expect(result).toEqual(mockedAsyncConfig);\n  });\n});\n\n// TODO add more tests\n"]}