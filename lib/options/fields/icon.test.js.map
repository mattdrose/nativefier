{"version":3,"sources":["options/fields/icon.test.js"],"names":["jest","mock","mockedResult","describe","test","expect","toHaveBeenCalledTimes","params","icon","resolves","toBe","mockImplementationOnce","Promise","resolve","targetUrl","platform","then","result","toHaveBeenCalledWith","reject","Error","warn"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,KAAKC,IAAL,CAAU,yBAAV;AACAD,KAAKC,IAAL,CAAU,UAAV;;AAEA,IAAMC,eAAe,WAArB;;AAEAC,SAAS,mCAAT,EAA8C,YAAM;AAClDC,OAAK,qCAAL,EAA4C,YAAM;AAChDC,6BAAkBC,qBAAlB,CAAwC,CAAxC;;AAEA,QAAMC,SAAS,EAAEC,MAAM,YAAR,EAAf;AACAH,WAAO,oBAAKE,MAAL,CAAP,EAAqBE,QAArB,CAA8BC,IAA9B,CAAmCH,OAAOC,IAA1C;AACD,GALD;AAMD,CAPD;;AASAL,SAAS,uCAAT,EAAkD,YAAM;AACtDC,OAAK,0BAAL,EAAiC,YAAM;AACrC,qBAAUO,sBAAV,CAAiC;AAAA,aAAMC,QAAQC,OAAR,CAAgBX,YAAhB,CAAN;AAAA,KAAjC;AACA,QAAMK,SAAS,EAAEO,WAAW,UAAb,EAAyBC,UAAU,KAAnC,EAAf;;AAEA,WAAO,oBAAKR,MAAL,EAAaS,IAAb,CAAkB,UAACC,MAAD,EAAY;AACnCZ,aAAOY,MAAP,EAAeP,IAAf,CAAoBR,YAApB;AACAG,+BAAkBa,oBAAlB,CAAuCX,OAAOO,SAA9C,EAAyDP,OAAOQ,QAAhE;AACD,KAHM,CAAP;AAID,GARD;;AAUAZ,WAAS,uCAAT,EAAkD,YAAM;AACtDC,SAAK,4BAAL,EAAmC,YAAM;AACvC,uBAAUO,sBAAV,CAAiC;AAAA,eAAMC,QAAQO,MAAR,CAAe,IAAIC,KAAJ,CAAU,YAAV,CAAf,CAAN;AAAA,OAAjC;AACA,UAAMb,SAAS,EAAEO,WAAW,UAAb,EAAyBC,UAAU,KAAnC,EAAf;;AAEA,aAAO,oBAAKR,MAAL,EAAaS,IAAb,CAAkB,UAACC,MAAD,EAAY;AACnCZ,eAAOY,MAAP,EAAeP,IAAf,CAAoB,IAApB;AACAL,iCAAkBa,oBAAlB,CAAuCX,OAAOO,SAA9C,EAAyDP,OAAOQ,QAAhE;AACAV,eAAO,mBAAIgB,IAAX,EAAiBf,qBAAjB,CAAuC,CAAvC;AACD,OAJM,CAAP;AAKD,KATD;AAUD,GAXD;AAYD,CAvBD","file":"icon.test.js","sourcesContent":["import log from 'loglevel';\nimport icon from './icon';\nimport { inferIcon } from './../../infer';\n\njest.mock('./../../infer/inferIcon');\njest.mock('loglevel');\n\nconst mockedResult = 'icon path';\n\ndescribe('when the icon parameter is passed', () => {\n  test('it should return the icon parameter', () => {\n    expect(inferIcon).toHaveBeenCalledTimes(0);\n\n    const params = { icon: './icon.png' };\n    expect(icon(params)).resolves.toBe(params.icon);\n  });\n});\n\ndescribe('when the icon parameter is not passed', () => {\n  test('it should call inferIcon', () => {\n    inferIcon.mockImplementationOnce(() => Promise.resolve(mockedResult));\n    const params = { targetUrl: 'some url', platform: 'mac' };\n\n    return icon(params).then((result) => {\n      expect(result).toBe(mockedResult);\n      expect(inferIcon).toHaveBeenCalledWith(params.targetUrl, params.platform);\n    });\n  });\n\n  describe('when inferIcon resolves with an error', () => {\n    test('it should handle the error', () => {\n      inferIcon.mockImplementationOnce(() => Promise.reject(new Error('some error')));\n      const params = { targetUrl: 'some url', platform: 'mac' };\n\n      return icon(params).then((result) => {\n        expect(result).toBe(null);\n        expect(inferIcon).toHaveBeenCalledWith(params.targetUrl, params.platform);\n        expect(log.warn).toHaveBeenCalledTimes(1);\n      });\n    });\n  });\n});\n"]}