{"version":3,"sources":["options/fields/userAgent.test.js"],"names":["jest","mock","test","expect","toHaveBeenCalledTimes","params","userAgent","resolves","toBe","electronVersion","platform","toHaveBeenCalledWith"],"mappings":";;AAAA;;;;AACA;;;;AAEAA,KAAKC,IAAL,CAAU,8BAAV;;AAEAC,KAAK,sCAAL,EAA6C,YAAM;AACjDC,gCAAuBC,qBAAvB,CAA6C,CAA7C;;AAEA,MAAMC,SAAS,EAAEC,WAAW,kBAAb,EAAf;AACAH,SAAO,yBAAUE,MAAV,CAAP,EAA0BE,QAA1B,CAAmCC,IAAnC,CAAwCH,OAAOC,SAA/C;AACD,CALD;;AAOAJ,KAAK,kCAAL,EAAyC,YAAM;AAC7C,MAAMG,SAAS,EAAEI,iBAAiB,KAAnB,EAA0BC,UAAU,KAApC,EAAf;AACA,2BAAUL,MAAV;AACAF,gCAAuBQ,oBAAvB,CAA4CN,OAAOI,eAAnD,EAAoEJ,OAAOK,QAA3E;AACD,CAJD","file":"userAgent.test.js","sourcesContent":["import userAgent from './userAgent';\nimport { inferUserAgent } from './../../infer';\n\njest.mock('./../../infer/inferUserAgent');\n\ntest('when a userAgent parameter is passed', () => {\n  expect(inferUserAgent).toHaveBeenCalledTimes(0);\n\n  const params = { userAgent: 'valid user agent' };\n  expect(userAgent(params)).resolves.toBe(params.userAgent);\n});\n\ntest('no userAgent parameter is passed', () => {\n  const params = { electronVersion: '123', platform: 'mac' };\n  userAgent(params);\n  expect(inferUserAgent).toHaveBeenCalledWith(params.electronVersion, params.platform);\n});\n\n"]}