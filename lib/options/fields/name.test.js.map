{"version":3,"sources":["options/fields/name.test.js"],"names":["jest","mock","mockImplementation","_","filename","mockedResult","describe","params","name","platform","test","then","result","expect","toHaveBeenCalledTimes","toBe","toHaveBeenCalledWith","beforeEach","mockImplementationOnce","Promise","resolve","targetUrl","testParams","Object","assign","reject","Error","warn"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEAA,KAAKC,IAAL,CAAU,0BAAV;AACAD,KAAKC,IAAL,CAAU,gCAAV;AACAD,KAAKC,IAAL,CAAU,UAAV;;AAEA,wBAAiBC,kBAAjB,CAAoC,UAACC,CAAD,EAAIC,QAAJ;AAAA,SAAiBA,QAAjB;AAAA,CAApC;;AAEA,IAAMC,eAAe,WAArB;;AAEAC,SAAS,6BAAT,EAAwC,YAAM;AAC5C,MAAMC,SAAS,EAAEC,MAAM,SAAR,EAAmBC,UAAU,WAA7B,EAAf;AACAC,OAAK,+BAAL,EAAsC;AAAA,WAAM,oBAAKH,MAAL,EAAaI,IAAb,CAAkB,UAACC,MAAD,EAAY;AACxEC,gCAAmBC,qBAAnB,CAAyC,CAAzC;AACAD,aAAOD,MAAP,EAAeG,IAAf,CAAoBR,OAAOC,IAA3B;AACD,KAH2C,CAAN;AAAA,GAAtC;;AAKAE,OAAK,kCAAL,EAAyC;AAAA,WAAM,oBAAKH,MAAL,EAAaI,IAAb,CAAkB,UAACC,MAAD,EAAY;AAC3EC,sCAAyBG,oBAAzB,CAA8CT,OAAOE,QAArD,EAA+DG,MAA/D;AACD,KAF8C,CAAN;AAAA,GAAzC;AAGD,CAVD;;AAYAN,SAAS,qBAAT,EAAgC,YAAM;AACpCW,aAAW,YAAM;AACf,sBAAWC,sBAAX,CAAkC;AAAA,aAAMC,QAAQC,OAAR,CAAgBf,YAAhB,CAAN;AAAA,KAAlC;AACD,GAFD;;AAIA,MAAME,SAAS,EAAEc,WAAW,UAAb,EAAf;AACAf,WAAS,4BAAT,EAAuC,YAAM;AAC3CI,SAAK,2BAAL,EAAkC;AAAA,aAAM,oBAAKH,MAAL,EAAaI,IAAb,CAAkB,YAAM;AAC9DE,kCAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;AACD,OAFuC,CAAN;AAAA,KAAlC;AAGD,GAJD;;AAMAf,WAAS,kCAAT,EAA6C,YAAM;AACjDI,SAAK,2BAAL,EAAkC,YAAM;AACtC,UAAMY,aAAaC,OAAOC,MAAP,CAAc,EAAd,EAAkBjB,MAAlB,EAA0B,EAAEC,MAAM,EAAR,EAA1B,CAAnB;;AAEA,aAAO,oBAAKc,UAAL,EAAiBX,IAAjB,CAAsB,YAAM;AACjCE,kCAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;AACD,OAFM,CAAP;AAGD,KAND;AAOD,GARD;;AAUAX,OAAK,kCAAL,EAAyC;AAAA,WAAM,oBAAKH,MAAL,EAAaI,IAAb,CAAkB,UAACC,MAAD,EAAY;AAC3EC,sCAAyBG,oBAAzB,CAA8CT,OAAOE,QAArD,EAA+DG,MAA/D;AACD,KAF8C,CAAN;AAAA,GAAzC;AAGD,CAzBD;;AA2BAN,SAAS,6BAAT,EAAwC,YAAM;AAC5C,MAAMC,SAAS,EAAEc,WAAW,UAAb,EAAyBb,MAAM,EAA/B,EAAmCC,UAAU,WAA7C,EAAf;AACAC,OAAK,6CAAL,EAAoD,YAAM;AACxD,sBAAWQ,sBAAX,CAAkC;AAAA,aAAMC,QAAQC,OAAR,CAAgBf,YAAhB,CAAN;AAAA,KAAlC;;AAEA,WAAO,oBAAKE,MAAL,EAAaI,IAAb,CAAkB,UAACC,MAAD,EAAY;AACnCC,aAAOD,MAAP,EAAeG,IAAf,CAAoBV,YAApB;AACAQ,gCAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;AACD,KAHM,CAAP;AAID,GAPD;;AASAf,WAAS,uCAAT,EAAkD,YAAM;AACtDI,SAAK,uCAAL,EAA8C,YAAM;AAClD,wBAAWQ,sBAAX,CAAkC;AAAA,eAAMC,QAAQC,OAAR,CAAgB,IAAhB,CAAN;AAAA,OAAlC;;AAEA,aAAO,oBAAKb,MAAL,EAAaI,IAAb,CAAkB,UAACC,MAAD,EAAY;AACnCC,eAAOD,MAAP,EAAeG,IAAf;AACAF,kCAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;AACD,OAHM,CAAP;AAID,KAPD;AAQD,GATD;;AAWAf,WAAS,wCAAT,EAAmD,YAAM;AACvDI,SAAK,uCAAL,EAA8C,YAAM;AAClD,wBAAWQ,sBAAX,CAAkC;AAAA,eAAMC,QAAQM,MAAR,CAAe,IAAIC,KAAJ,CAAU,YAAV,CAAf,CAAN;AAAA,OAAlC;;AAEA,aAAO,oBAAKnB,MAAL,EAAaI,IAAb,CAAkB,UAACC,MAAD,EAAY;AACnCC,eAAOD,MAAP,EAAeG,IAAf;AACAF,kCAAmBG,oBAAnB,CAAwCT,OAAOc,SAA/C;AACAR,eAAO,mBAAIc,IAAX,EAAiBb,qBAAjB,CAAuC,CAAvC;AACD,OAJM,CAAP;AAKD,KARD;AASD,GAVD;AAWD,CAjCD","file":"name.test.js","sourcesContent":["import log from 'loglevel';\nimport name from './name';\nimport { DEFAULT_APP_NAME } from './../../constants';\nimport { inferTitle } from './../../infer';\nimport { sanitizeFilename } from './../../utils';\n\njest.mock('./../../infer/inferTitle');\njest.mock('./../../utils/sanitizeFilename');\njest.mock('loglevel');\n\nsanitizeFilename.mockImplementation((_, filename) => filename);\n\nconst mockedResult = 'mock name';\n\ndescribe('well formed name parameters', () => {\n  const params = { name: 'appname', platform: 'something' };\n  test('it should not call inferTitle', () => name(params).then((result) => {\n    expect(inferTitle).toHaveBeenCalledTimes(0);\n    expect(result).toBe(params.name);\n  }));\n\n  test('it should call sanitize filename', () => name(params).then((result) => {\n    expect(sanitizeFilename).toHaveBeenCalledWith(params.platform, result);\n  }));\n});\n\ndescribe('bad name parameters', () => {\n  beforeEach(() => {\n    inferTitle.mockImplementationOnce(() => Promise.resolve(mockedResult));\n  });\n\n  const params = { targetUrl: 'some url' };\n  describe('when the name is undefined', () => {\n    test('it should call inferTitle', () => name(params).then(() => {\n      expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n    }));\n  });\n\n  describe('when the name is an empty string', () => {\n    test('it should call inferTitle', () => {\n      const testParams = Object.assign({}, params, { name: '' });\n\n      return name(testParams).then(() => {\n        expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n      });\n    });\n  });\n\n  test('it should call sanitize filename', () => name(params).then((result) => {\n    expect(sanitizeFilename).toHaveBeenCalledWith(params.platform, result);\n  }));\n});\n\ndescribe('handling inferTitle results', () => {\n  const params = { targetUrl: 'some url', name: '', platform: 'something' };\n  test('it should return the result from inferTitle', () => {\n    inferTitle.mockImplementationOnce(() => Promise.resolve(mockedResult));\n\n    return name(params).then((result) => {\n      expect(result).toBe(mockedResult);\n      expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n    });\n  });\n\n  describe('when the returned pageTitle is falsey', () => {\n    test('it should return the default app name', () => {\n      inferTitle.mockImplementationOnce(() => Promise.resolve(null));\n\n      return name(params).then((result) => {\n        expect(result).toBe(DEFAULT_APP_NAME);\n        expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n      });\n    });\n  });\n\n  describe('when inferTitle resolves with an error', () => {\n    test('it should return the default app name', () => {\n      inferTitle.mockImplementationOnce(() => Promise.reject(new Error('some error')));\n\n      return name(params).then((result) => {\n        expect(result).toBe(DEFAULT_APP_NAME);\n        expect(inferTitle).toHaveBeenCalledWith(params.targetUrl);\n        expect(log.warn).toHaveBeenCalledTimes(1);\n      });\n    });\n  });\n});\n"]}